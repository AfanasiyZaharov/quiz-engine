!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=117)}([function(t,n){t.exports=function(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){(function(n){var e=function(t){return t&&t.Math==Math&&t};t.exports=e("object"==typeof globalThis&&globalThis)||e("object"==typeof window&&window)||e("object"==typeof self&&self)||e("object"==typeof n&&n)||Function("return this")()}).call(this,e(74))},function(t,n,e){var r=e(5);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,n,e){var r=e(2),o=e(52),i=e(10),a=e(53),c=e(60),u=e(84),s=o("wks"),l=r.Symbol,f=u?l:l&&l.withoutSetter||a;t.exports=function(t){return i(s,t)||(c&&i(l,t)?s[t]=l[t]:s[t]=f("Symbol."+t)),s[t]}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(2),o=e(45).f,i=e(12),a=e(16),c=e(28),u=e(78),s=e(57);t.exports=function(t,n){var e,l,f,p,v,h=t.target,d=t.global,g=t.stat;if(e=d?r:g?r[h]||c(h,{}):(r[h]||{}).prototype)for(l in n){if(p=n[l],f=t.noTargetGet?(v=o(e,l))&&v.value:e[l],!s(d?l:h+(g?".":"#")+l,t.forced)&&void 0!==f){if(typeof p==typeof f)continue;u(p,f)}(t.sham||f&&f.sham)&&i(p,"sham",!0),a(e,l,p,t)}}},function(t,n){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},function(t,n,e){var r=e(1);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(8),o=e(46),i=e(3),a=e(27),c=Object.defineProperty;n.f=r?c:function(t,n,e){if(i(t),n=a(n,!0),i(e),o)try{return c(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(8),o=e(11),i=e(25);t.exports=r?function(t,n,e){return o.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(20),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,n){t.exports=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n,e){var r=e(2),o=e(12),i=e(10),a=e(28),c=e(48),u=e(50),s=u.get,l=u.enforce,f=String(String).split("String");(t.exports=function(t,n,e,c){var u=!!c&&!!c.unsafe,s=!!c&&!!c.enumerable,p=!!c&&!!c.noTargetGet;"function"==typeof e&&("string"!=typeof n||i(e,"name")||o(e,"name",n),l(e).source=f.join("string"==typeof n?n:"")),t!==r?(u?!p&&t[n]&&(s=!0):delete t[n],s?t[n]=e:o(t,n,e)):s?t[n]=e:a(n,e)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||c(this)}))},function(t,n,e){var r=e(80),o=e(2),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,n){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][n]||o[t]&&o[t][n]}},function(t,n,e){var r=e(112),o=e(113),i=e(114),a=e(115);t.exports=function(t){return r(t)||o(t)||i(t)||a()}},function(t,n,e){var r=e(26),o=e(9);t.exports=function(t){return r(o(t))}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,n,e){var r=e(8),o=e(1),i=e(10),a=Object.defineProperty,c={},u=function(t){throw t};t.exports=function(t,n){if(i(c,t))return c[t];n||(n={});var e=[][t],s=!!i(n,"ACCESSORS")&&n.ACCESSORS,l=i(n,0)?n[0]:u,f=i(n,1)?n[1]:void 0;return c[t]=!!e&&!o((function(){if(s&&!r)return!0;var t={length:-1};s?a(t,1,{enumerable:!0,get:u}):t[1]=1,e.call(t,l,f)}))}},function(t,n,e){"use strict";var r,o,i=e(37),a=e(69),c=RegExp.prototype.exec,u=String.prototype.replace,s=c,l=(r=/a/,o=/b*/g,c.call(r,"a"),c.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),f=a.UNSUPPORTED_Y||a.BROKEN_CARET,p=void 0!==/()??/.exec("")[1];(l||p||f)&&(s=function(t){var n,e,r,o,a=this,s=f&&a.sticky,v=i.call(a),h=a.source,d=0,g=t;return s&&(-1===(v=v.replace("y","")).indexOf("g")&&(v+="g"),g=String(t).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&"\n"!==t[a.lastIndex-1])&&(h="(?: "+h+")",g=" "+g,d++),e=new RegExp("^(?:"+h+")",v)),p&&(e=new RegExp("^"+h+"$(?!\\s)",v)),l&&(n=a.lastIndex),r=c.call(s?e:a,g),s?r?(r.input=r.input.slice(d),r[0]=r[0].slice(d),r.index=a.lastIndex,a.lastIndex+=r[0].length):a.lastIndex=0:l&&r&&(a.lastIndex=a.global?r.index+r[0].length:n),p&&r&&r.length>1&&u.call(r[0],e,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),t.exports=s},function(t,n){function e(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n,e){var r=e(1),o=e(15),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,n,e){var r=e(5);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n,e){var r=e(2),o=e(12);t.exports=function(t,n){try{o(r,t,n)}catch(e){r[t]=n}return n}},function(t,n){t.exports={}},function(t,n){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,n,e){var r=e(83),o=e(26),i=e(32),a=e(13),c=e(58),u=[].push,s=function(t){var n=1==t,e=2==t,s=3==t,l=4==t,f=6==t,p=5==t||f;return function(v,h,d,g){for(var x,y,m=i(v),b=o(m),w=r(h,d,3),A=a(b.length),S=0,T=g||c,q=n?T(v,A):e?T(v,0):void 0;A>S;S++)if((p||S in b)&&(y=w(x=b[S],S,m),t))if(n)q[S]=y;else if(y)switch(t){case 3:return!0;case 5:return x;case 6:return S;case 2:u.call(q,x)}else if(l)return!1;return f?-1:s||l?l:q}};t.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6)}},function(t,n,e){var r=e(9);t.exports=function(t){return Object(r(t))}},function(t,n,e){var r=e(1),o=e(4),i=e(61),a=o("species");t.exports=function(t){return i>=51||!r((function(){var n=[];return(n.constructor={})[a]=function(){return{foo:1}},1!==n[t](Boolean).foo}))}},function(t,n,e){"use strict";var r=e(6),o=e(31).map,i=e(33),a=e(22),c=i("map"),u=a("map");r({target:"Array",proto:!0,forced:!c||!u},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){"use strict";var r=e(6),o=e(1),i=e(59),a=e(5),c=e(32),u=e(13),s=e(87),l=e(58),f=e(33),p=e(4),v=e(61),h=p("isConcatSpreadable"),d=v>=51||!o((function(){var t=[];return t[h]=!1,t.concat()[0]!==t})),g=f("concat"),x=function(t){if(!a(t))return!1;var n=t[h];return void 0!==n?!!n:i(t)};r({target:"Array",proto:!0,forced:!d||!g},{concat:function(t){var n,e,r,o,i,a=c(this),f=l(a,0),p=0;for(n=-1,r=arguments.length;n<r;n++)if(x(i=-1===n?a:arguments[n])){if(p+(o=u(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(e=0;e<o;e++,p++)e in i&&s(f,p,i[e])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");s(f,p++,i)}return f.length=p,f}})},function(t,n,e){var r={};r[e(4)("toStringTag")]="z",t.exports="[object z]"===String(r)},function(t,n,e){"use strict";var r=e(3);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.dotAll&&(n+="s"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){"use strict";var r=e(6),o=e(23);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(t,n,e){"use strict";e(38);var r=e(16),o=e(1),i=e(4),a=e(23),c=e(12),u=i("species"),s=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l="$0"==="a".replace(/./,"$0"),f=i("replace"),p=!!/./[f]&&""===/./[f]("a","$0"),v=!o((function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2!==e.length||"a"!==e[0]||"b"!==e[1]}));t.exports=function(t,n,e,f){var h=i(t),d=!o((function(){var n={};return n[h]=function(){return 7},7!=""[t](n)})),g=d&&!o((function(){var n=!1,e=/a/;return"split"===t&&((e={}).constructor={},e.constructor[u]=function(){return e},e.flags="",e[h]=/./[h]),e.exec=function(){return n=!0,null},e[h](""),!n}));if(!d||!g||"replace"===t&&(!s||!l||p)||"split"===t&&!v){var x=/./[h],y=e(h,""[t],(function(t,n,e,r,o){return n.exec===a?d&&!o?{done:!0,value:x.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),{REPLACE_KEEPS_$0:l,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:p}),m=y[0],b=y[1];r(String.prototype,t,m),r(RegExp.prototype,h,2==n?function(t,n){return b.call(t,this,n)}:function(t){return b.call(t,this)})}f&&c(RegExp.prototype[h],"sham",!0)}},function(t,n,e){var r=e(5),o=e(15),i=e(4)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},function(t,n,e){"use strict";var r=e(99).charAt;t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){var r=e(15),o=e(23);t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var i=e.call(t,n);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,n)}},function(t,n,e){var r=e(96);t.exports=function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&r(t,n)}},function(t,n){function e(n){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(n)}t.exports=e},function(t,n,e){var r=e(8),o=e(75),i=e(25),a=e(19),c=e(27),u=e(10),s=e(46),l=Object.getOwnPropertyDescriptor;n.f=r?l:function(t,n){if(t=a(t),n=c(n,!0),s)try{return l(t,n)}catch(t){}if(u(t,n))return i(!o.f.call(t,n),t[n])}},function(t,n,e){var r=e(8),o=e(1),i=e(47);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,n,e){var r=e(2),o=e(5),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,n,e){var r=e(49),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},function(t,n,e){var r=e(2),o=e(28),i=r["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,n,e){var r,o,i,a=e(76),c=e(2),u=e(5),s=e(12),l=e(10),f=e(51),p=e(29),v=c.WeakMap;if(a){var h=new v,d=h.get,g=h.has,x=h.set;r=function(t,n){return x.call(h,t,n),n},o=function(t){return d.call(h,t)||{}},i=function(t){return g.call(h,t)}}else{var y=f("state");p[y]=!0,r=function(t,n){return s(t,y,n),n},o=function(t){return l(t,y)?t[y]:{}},i=function(t){return l(t,y)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(n){var e;if(!u(n)||(e=o(n)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return e}}}},function(t,n,e){var r=e(52),o=e(53),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,n,e){var r=e(77),o=e(49);(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+r).toString(36)}},function(t,n,e){var r=e(55),o=e(30).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,n,e){var r=e(10),o=e(19),i=e(56).indexOf,a=e(29);t.exports=function(t,n){var e,c=o(t),u=0,s=[];for(e in c)!r(a,e)&&r(c,e)&&s.push(e);for(;n.length>u;)r(c,e=n[u++])&&(~i(s,e)||s.push(e));return s}},function(t,n,e){var r=e(19),o=e(13),i=e(81),a=function(t){return function(n,e,a){var c,u=r(n),s=o(u.length),l=i(a,s);if(t&&e!=e){for(;s>l;)if((c=u[l++])!=c)return!0}else for(;s>l;l++)if((t||l in u)&&u[l]===e)return t||l||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,n,e){var r=e(1),o=/#|\.prototype\./,i=function(t,n){var e=c[a(t)];return e==s||e!=u&&("function"==typeof n?r(n):!!n)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},c=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";t.exports=i},function(t,n,e){var r=e(5),o=e(59),i=e(4)("species");t.exports=function(t,n){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)?r(e)&&null===(e=e[i])&&(e=void 0):e=void 0),new(void 0===e?Array:e)(0===n?0:n)}},function(t,n,e){var r=e(15);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var r=e(1);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,n,e){var r,o,i=e(2),a=e(85),c=i.process,u=c&&c.versions,s=u&&u.v8;s?o=(r=s.split("."))[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},function(t,n,e){"use strict";var r=e(6),o=e(63);r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(t,n,e){"use strict";var r=e(31).forEach,o=e(64),i=e(22),a=o("forEach"),c=i("forEach");t.exports=a&&c?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},function(t,n,e){"use strict";var r=e(1);t.exports=function(t,n){var e=[][t];return!!e&&r((function(){e.call(null,n||function(){throw 1},1)}))}},function(t,n,e){var r=e(2),o=e(86),i=e(63),a=e(12);for(var c in o){var u=r[c],s=u&&u.prototype;if(s&&s.forEach!==i)try{a(s,"forEach",i)}catch(t){s.forEach=i}}},function(t,n,e){var r,o=e(3),i=e(92),a=e(30),c=e(29),u=e(94),s=e(47),l=e(51),f=l("IE_PROTO"),p=function(){},v=function(t){return"<script>"+t+"<\/script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,n;h=r?function(t){t.write(v("")),t.close();var n=t.parentWindow.Object;return t=null,n}(r):((n=s("iframe")).style.display="none",u.appendChild(n),n.src=String("javascript:"),(t=n.contentWindow.document).open(),t.write(v("document.F=Object")),t.close(),t.F);for(var e=a.length;e--;)delete h.prototype[a[e]];return h()};c[f]=!0,t.exports=Object.create||function(t,n){var e;return null!==t?(p.prototype=o(t),e=new p,p.prototype=null,e[f]=t):e=h(),void 0===n?e:i(e,n)}},function(t,n,e){"use strict";var r=e(16),o=e(3),i=e(1),a=e(37),c=RegExp.prototype,u=c.toString,s=i((function(){return"/a/b"!=u.call({source:"a",flags:"b"})})),l="toString"!=u.name;(s||l)&&r(RegExp.prototype,"toString",(function(){var t=o(this),n=String(t.source),e=t.flags;return"/"+n+"/"+String(void 0===e&&t instanceof RegExp&&!("flags"in c)?a.call(t):e)}),{unsafe:!0})},function(t,n,e){"use strict";var r=e(6),o=e(26),i=e(19),a=e(64),c=[].join,u=o!=Object,s=a("join",",");r({target:"Array",proto:!0,forced:u||!s},{join:function(t){return c.call(i(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(1);function o(t,n){return RegExp(t,n)}n.UNSUPPORTED_Y=r((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),n.BROKEN_CARET=r((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},function(t,n,e){"use strict";var r=e(39),o=e(40),i=e(3),a=e(9),c=e(98),u=e(41),s=e(13),l=e(42),f=e(23),p=e(1),v=[].push,h=Math.min,d=!p((function(){return!RegExp(4294967295,"y")}));r("split",2,(function(t,n,e){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var r=String(a(this)),i=void 0===e?4294967295:e>>>0;if(0===i)return[];if(void 0===t)return[r];if(!o(t))return n.call(r,t,i);for(var c,u,s,l=[],p=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),h=0,d=new RegExp(t.source,p+"g");(c=f.call(d,r))&&!((u=d.lastIndex)>h&&(l.push(r.slice(h,c.index)),c.length>1&&c.index<r.length&&v.apply(l,c.slice(1)),s=c[0].length,h=u,l.length>=i));)d.lastIndex===c.index&&d.lastIndex++;return h===r.length?!s&&d.test("")||l.push(""):l.push(r.slice(h)),l.length>i?l.slice(0,i):l}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:n.call(this,t,e)}:n,[function(n,e){var o=a(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,o,e):r.call(String(o),n,e)},function(t,o){var a=e(r,t,this,o,r!==n);if(a.done)return a.value;var f=i(t),p=String(this),v=c(f,RegExp),g=f.unicode,x=(f.ignoreCase?"i":"")+(f.multiline?"m":"")+(f.unicode?"u":"")+(d?"y":"g"),y=new v(d?f:"^(?:"+f.source+")",x),m=void 0===o?4294967295:o>>>0;if(0===m)return[];if(0===p.length)return null===l(y,p)?[p]:[];for(var b=0,w=0,A=[];w<p.length;){y.lastIndex=d?w:0;var S,T=l(y,d?p:p.slice(w));if(null===T||(S=h(s(y.lastIndex+(d?0:w)),p.length))===b)w=u(p,w,g);else{if(A.push(p.slice(b,w)),A.length===m)return A;for(var q=1;q<=T.length-1;q++)if(A.push(T[q]),A.length===m)return A;w=b=S}}return A.push(p.slice(b)),A}]}),!d)},function(t,n){t.exports=function(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}},function(t,n,e){var r=e(97),o=e(7);t.exports=function(t,n){return!n||"object"!==r(n)&&"function"!=typeof n?o(t):n}},function(t,n,e){"use strict";var r=e(6),o=e(31).filter,i=e(33),a=e(22),c=i("filter"),u=a("filter");r({target:"Array",proto:!0,forced:!c||!u},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);n.f=i?function(t){var n=o(this,t);return!!n&&n.enumerable}:r},function(t,n,e){var r=e(2),o=e(48),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},function(t,n){t.exports=!1},function(t,n,e){var r=e(10),o=e(79),i=e(45),a=e(11);t.exports=function(t,n){for(var e=o(n),c=a.f,u=i.f,s=0;s<e.length;s++){var l=e[s];r(t,l)||c(t,l,u(n,l))}}},function(t,n,e){var r=e(17),o=e(54),i=e(82),a=e(3);t.exports=r("Reflect","ownKeys")||function(t){var n=o.f(a(t)),e=i.f;return e?n.concat(e(t)):n}},function(t,n,e){var r=e(2);t.exports=r},function(t,n,e){var r=e(20),o=Math.max,i=Math.min;t.exports=function(t,n){var e=r(t);return e<0?o(e+n,0):i(e,n)}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(21);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 0:return function(){return t.call(n)};case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n,e){var r=e(60);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,n,e){var r=e(17);t.exports=r("navigator","userAgent")||""},function(t,n){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,n,e){"use strict";var r=e(27),o=e(11),i=e(25);t.exports=function(t,n,e){var a=r(n);a in t?o.f(t,a,i(0,e)):t[a]=e}},function(t,n,e){var r=e(36),o=e(16),i=e(89);r||o(Object.prototype,"toString",i,{unsafe:!0})},function(t,n,e){"use strict";var r=e(36),o=e(90);t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(t,n,e){var r=e(36),o=e(15),i=e(4)("toStringTag"),a="Arguments"==o(function(){return arguments}());t.exports=r?o:function(t){var n,e,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?e:a?o(n):"Object"==(r=o(n))&&"function"==typeof n.callee?"Arguments":r}},function(t,n,e){var r=e(6),o=e(17),i=e(21),a=e(3),c=e(5),u=e(66),s=e(95),l=e(1),f=o("Reflect","construct"),p=l((function(){function t(){}return!(f((function(){}),[],t)instanceof t)})),v=!l((function(){f((function(){}))})),h=p||v;r({target:"Reflect",stat:!0,forced:h,sham:h},{construct:function(t,n){i(t),a(n);var e=arguments.length<3?t:i(arguments[2]);if(v&&!p)return f(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(s.apply(t,r))}var o=e.prototype,l=u(c(o)?o:Object.prototype),h=Function.apply.call(t,l,n);return c(h)?h:l}})},function(t,n,e){var r=e(8),o=e(11),i=e(3),a=e(93);t.exports=r?Object.defineProperties:function(t,n){i(t);for(var e,r=a(n),c=r.length,u=0;c>u;)o.f(t,e=r[u++],n[e]);return t}},function(t,n,e){var r=e(55),o=e(30);t.exports=Object.keys||function(t){return r(t,o)}},function(t,n,e){var r=e(17);t.exports=r("document","documentElement")},function(t,n,e){"use strict";var r=e(21),o=e(5),i=[].slice,a={},c=function(t,n,e){if(!(n in a)){for(var r=[],o=0;o<n;o++)r[o]="a["+o+"]";a[n]=Function("C,a","return new C("+r.join(",")+")")}return a[n](t,e)};t.exports=Function.bind||function(t){var n=r(this),e=i.call(arguments,1),a=function(){var r=e.concat(i.call(arguments));return this instanceof a?c(n,r.length,r):n.apply(t,r)};return o(n.prototype)&&(a.prototype=n.prototype),a}},function(t,n){function e(n,r){return t.exports=e=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t},e(n,r)}t.exports=e},function(t,n){function e(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=e=function(t){return typeof t}:t.exports=e=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(n)}t.exports=e},function(t,n,e){var r=e(3),o=e(21),i=e(4)("species");t.exports=function(t,n){var e,a=r(t).constructor;return void 0===a||null==(e=r(a)[i])?n:o(e)}},function(t,n,e){var r=e(20),o=e(9),i=function(t){return function(n,e){var i,a,c=String(o(n)),u=r(e),s=c.length;return u<0||u>=s?t?"":void 0:(i=c.charCodeAt(u))<55296||i>56319||u+1===s||(a=c.charCodeAt(u+1))<56320||a>57343?t?c.charAt(u):i:t?c.slice(u,u+2):a-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},function(t,n,e){"use strict";var r=e(6),o=e(56).includes,i=e(101);r({target:"Array",proto:!0,forced:!e(22)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(t,n,e){var r=e(4),o=e(66),i=e(11),a=r("unscopables"),c=Array.prototype;null==c[a]&&i.f(c,a,{configurable:!0,value:o(null)}),t.exports=function(t){c[a][t]=!0}},function(t,n,e){var r=e(8),o=e(2),i=e(57),a=e(103),c=e(11).f,u=e(54).f,s=e(40),l=e(37),f=e(69),p=e(16),v=e(1),h=e(50).set,d=e(106),g=e(4)("match"),x=o.RegExp,y=x.prototype,m=/a/g,b=/a/g,w=new x(m)!==m,A=f.UNSUPPORTED_Y;if(r&&i("RegExp",!w||A||v((function(){return b[g]=!1,x(m)!=m||x(b)==b||"/a/i"!=x(m,"i")})))){for(var S=function(t,n){var e,r=this instanceof S,o=s(t),i=void 0===n;if(!r&&o&&t.constructor===S&&i)return t;w?o&&!i&&(t=t.source):t instanceof S&&(i&&(n=l.call(t)),t=t.source),A&&(e=!!n&&n.indexOf("y")>-1)&&(n=n.replace(/y/g,""));var c=a(w?new x(t,n):x(t,n),r?this:y,S);return A&&e&&h(c,{sticky:e}),c},T=function(t){t in S||c(S,t,{configurable:!0,get:function(){return x[t]},set:function(n){x[t]=n}})},q=u(x),E=0;q.length>E;)T(q[E++]);y.constructor=S,S.prototype=y,p(o,"RegExp",S)}d("RegExp")},function(t,n,e){var r=e(5),o=e(104);t.exports=function(t,n,e){var i,a;return o&&"function"==typeof(i=n.constructor)&&i!==e&&r(a=i.prototype)&&a!==e.prototype&&o(t,a),t}},function(t,n,e){var r=e(3),o=e(105);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,n=!1,e={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(e,[]),n=e instanceof Array}catch(t){}return function(e,i){return r(e),o(i),n?t.call(e,i):e.__proto__=i,e}}():void 0)},function(t,n,e){var r=e(5);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,n,e){"use strict";var r=e(17),o=e(11),i=e(4),a=e(8),c=i("species");t.exports=function(t){var n=r(t),e=o.f;a&&n&&!n[c]&&e(n,c,{configurable:!0,get:function(){return this}})}},function(t,n,e){"use strict";var r=e(6),o=e(108),i=e(9);r({target:"String",proto:!0,forced:!e(109)("includes")},{includes:function(t){return!!~String(i(this)).indexOf(o(t),arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(40);t.exports=function(t){if(r(t))throw TypeError("The method doesn't accept regular expressions");return t}},function(t,n,e){var r=e(4)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,"/./"[t](n)}catch(t){}}return!1}},function(t,n,e){"use strict";var r=e(39),o=e(3),i=e(13),a=e(9),c=e(41),u=e(42);r("match",1,(function(t,n,e){return[function(n){var e=a(this),r=null==n?void 0:n[t];return void 0!==r?r.call(n,e):new RegExp(n)[t](String(e))},function(t){var r=e(n,t,this);if(r.done)return r.value;var a=o(t),s=String(this);if(!a.global)return u(a,s);var l=a.unicode;a.lastIndex=0;for(var f,p=[],v=0;null!==(f=u(a,s));){var h=String(f[0]);p[v]=h,""===h&&(a.lastIndex=c(s,i(a.lastIndex),l)),v++}return 0===v?null:p}]}))},function(t,n,e){"use strict";var r=e(39),o=e(3),i=e(32),a=e(13),c=e(20),u=e(9),s=e(41),l=e(42),f=Math.max,p=Math.min,v=Math.floor,h=/\$([$&'`]|\d\d?|<[^>]*>)/g,d=/\$([$&'`]|\d\d?)/g;r("replace",2,(function(t,n,e,r){var g=r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,x=r.REPLACE_KEEPS_$0,y=g?"$":"$0";return[function(e,r){var o=u(this),i=null==e?void 0:e[t];return void 0!==i?i.call(e,o,r):n.call(String(o),e,r)},function(t,r){if(!g&&x||"string"==typeof r&&-1===r.indexOf(y)){var i=e(n,t,this,r);if(i.done)return i.value}var u=o(t),v=String(this),h="function"==typeof r;h||(r=String(r));var d=u.global;if(d){var b=u.unicode;u.lastIndex=0}for(var w=[];;){var A=l(u,v);if(null===A)break;if(w.push(A),!d)break;""===String(A[0])&&(u.lastIndex=s(v,a(u.lastIndex),b))}for(var S,T="",q=0,E=0;E<w.length;E++){A=w[E];for(var k=String(A[0]),_=f(p(c(A.index),v.length),0),O=[],B=1;B<A.length;B++)O.push(void 0===(S=A[B])?S:String(S));var j=A.groups;if(h){var I=[k].concat(O,_,v);void 0!==j&&I.push(j);var C=String(r.apply(void 0,I))}else C=m(k,v,_,O,j,r);_>=q&&(T+=v.slice(q,_)+C,q=_+k.length)}return T+v.slice(q)}];function m(t,e,r,o,a,c){var u=r+t.length,s=o.length,l=d;return void 0!==a&&(a=i(a),l=h),n.call(c,l,(function(n,i){var c;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(u);case"<":c=a[i.slice(1,-1)];break;default:var l=+i;if(0===l)return n;if(l>s){var f=v(l/10);return 0===f?n:f<=s?void 0===o[f-1]?i.charAt(1):o[f-1]+i.charAt(1):n}c=o[l-1]}return void 0===c?"":c}))}}))},function(t,n,e){var r=e(71);t.exports=function(t){if(Array.isArray(t))return r(t)}},function(t,n){t.exports=function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}},function(t,n,e){var r=e(71);t.exports=function(t,n){if(t){if("string"==typeof t)return r(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?r(t,n):void 0}}},function(t,n){t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},function(t,n){t.exports=decodeURIComponent("body%7Bbackground-color%3A%23efeee9%3Bfont-family%3A%22Open%20Sans%22%2C%20sans-serif%7D%23quiz%7Bdisplay%3Aflex%3Bwidth%3A800px%3Bmargin%3A0%20auto%3Bflex-direction%3Acolumn%7D.question%7Bposition%3Arelative%3Bbackground-color%3A%23fff%3Bborder%3A1px%20solid%20%23dadce0%3Bborder-radius%3A8px%3Bmargin-bottom%3A12px%3Bpadding%3A24px%3Bpage-break-inside%3Aavoid%7D.question%20.check-sign%7Bcursor%3Apointer%3Bcolor%3Agreen%3Bposition%3Aabsolute%3Bbottom%3A0.5vw%3Bright%3A0.6vw%3Bfont-size%3A20px%7D.question%20.right-answers%7Bcursor%3Apointer%3Bcolor%3Agrey%3Bposition%3Aabsolute%3Btop%3A0.5vw%3Bright%3A0.6vw%3Bfont-size%3A20px%7D.question.correct%7Bborder%3A1px%20solid%20green%7D.question.incorrect%7Bborder%3A1px%20solid%20red%7D.question-text%7Bfont-size%3A16px%3Bfont-weight%3A500%3Bletter-spacing%3A.1px%3Bline-height%3A24px%3Bcolor%3A%23202124%3Bfont-weight%3A400%3Bwidth%3A100%25%3Bword-break%3Abreak-word%3Bmargin-bottom%3A16px%7D.answer%7Bdisplay%3Aflex%3Bflex-direction%3Acolumn%7D.answer-text%7Bwidth%3A60%25%7D.answer-text.in-blank%7Bdisplay%3Ainline-block%3Bwidth%3Aauto%3Bmargin-right%3A5px%7D.answer-text-input%7Bpadding%3A2px%3Bborder%3A0%3Bborder-bottom%3A1px%20solid%20%23dadce0%3Bwidth%3A100%25%7D.answer-text-input.in-blank%7Bpadding%3A2px%3Bborder%3A0%3Bborder%3A1px%20solid%20%23dadce0%3Bwidth%3A100%25%7D.answer-text-input%3Afocus%7Boutline%3Anone%3Bborder-bottom%3A1px%20solid%20%235d636f%7D.answer-text-input.in-blank%3Afocus%7Boutline%3Anone%7D.error-text%7Bcolor%3Ared%3Bfont-size%3A12px%3Bwidth%3A55%25%3Bpadding-top%3A10px%7D.button%7Bwidth%3A150px%3Bheight%3A40px%3Bborder-radius%3A10px%3Bborder%3Anone%3Bbackground-color%3Awhite%3Bcursor%3Apointer%7D.button%3Afocus%7Boutline%3Anone%7D.button%3Aactive%7Bborder%3A1px%20solid%20%235d636f%7D.button-container%7Bdisplay%3Aflex%3Bjustify-content%3Aspace-around%7D%0A")},function(t,n,e){"use strict";e.r(n);e(73),e(62),e(34),e(65);var r=e(14),o=e.n(r),i=e(0),a=e.n(i),c=(e(35),e(88),e(91),e(67),e(7)),u=e.n(c),s=e(43),l=e.n(s),f=e(72),p=e.n(f),v=e(44),h=e.n(v),d=e(24),g=e.n(d),x=(e(68),e(38),e(70),function(t,n){if(console.log("id",n),"text-in-blank"===t.questionType){var e=t.questionText.split(/_+/);return'\n    <div class = "question" id="'.concat(n,'">\n      <div class="question-text">').concat(e.join("".concat(y(y,60))),'</div>\n      <div class="check-sign"><i class="fa fa-check-circle-o" aria-hidden="true"></i></div>\n      <div class="right-answers"><i class="fa fa-question-circle-o" aria-hidden="true"></i></div>\n    </div>\n  ')}return'\n    <div class = "question" id="'.concat(n,'">\n      <div class="question-text">').concat(t.questionText,'</div>\n      <div class="answer">\n        ').concat(m(t),'\n      </div>\n      <div class="check-sign"><i class="fa fa-check-circle-o" aria-hidden="true"></i></div>\n      <div class="right-answers"><i class="fa fa-question-circle-o" aria-hidden="true"></i></div>\n    </div>\n  ')}),y=function(t,n){return'\n  <div style="width:'.concat(n,'px;" class = "answer-text in-blank">\n    <input class = "answer-text-input in-blank" />\n  </div>\n')},m=function(t){return"simple-text"===t.questionType||"text-in-blank"===t.questionType?'\n      <div class = "answer-text">\n        <input class = "answer-text-input " />\n      </div>\n    ':"variants-single"===t.questionType?(console.log("      <form>\n    <div>\n      ".concat(t.variants.map((function(n,e){return'\n        <input type="radio" id="'.concat(t.questionText,"-").concat(e,'"\n          name="').concat(t.questionText,"-").concat(e,'" value="').concat(n,'" />\n        <label for="').concat(t.questionText,"-").concat(e,'">').concat(n,"</label>\n      ")})).join(" "),"\n    </div>\n  </form>")),"\n      <form>\n        <div>\n          ".concat(t.variants.map((function(n,e){return'\n            <input type="radio" id="'.concat(t.questionText,"-").concat(e,'"\n              name="').concat(t.questionText,'" value="').concat(n,'" />\n            <label for="').concat(t.questionText,"-").concat(e,'">').concat(n,"</label>\n          ")})).join(" "),"\n        </div>\n      </form>\n    ")):"variants-multi"===t.questionType?"\n      <form>\n        <div>\n          ".concat(t.variants.map((function(n,e){return'\n            <input type="checkbox" id="'.concat(t.questionText,"-").concat(e,'"\n              name="').concat(t.questionText,'" value="').concat(n,'" />\n            <label for="').concat(t.questionText,"-").concat(e,'">').concat(n,"</label>\n          ")})).join(" "),"\n        </div>\n      </form>\n    "):void 0},b=(e(100),e(102),e(107),e(110),e(111),e(18)),w=e.n(b),A={"can not":"can't","will not":"won't"," is":"'s"," have":"'ve"," has":"'s"," would":"'d"," had":"'d"," are":"'re"," will":"ll"," am":"'m","is not":"isn't","are not":"aren't","was not":"wasn't","were not":"weren't","has not":"hasn't","have not":"haven't","had not":"hadn't","does not":"doesn't","do not":"don't","did not":"didn't","could not":"couldn't","would not":"wouldn't","must not":"mustn't","need not":"needn't","should not":"shouldn't","might not":"mightn't","dare not":"daren't"},S=new RegExp(/\w+(?='\w+)/g),T=function(t){return t.toLowerCase().replace(/\.$/,"").replace(/ +/g," ").replace(/ $/,"").replace(/^ /,"").replace(/\.$/,"")},q=function(t,n){var e=k(t);return console.log("poss",e,n),O(e,n)},E=function(t,n){var e=-1;for(var r in t)r>e&&t[r].length>0&&r!=n&&(e=r);return-1===e?null:e},k=function(t){for(var n={},e=["’","'","`",'"'],r=0;r<e.length;r++){var o=new RegExp(e[r],"g");t=t.replace(o,"'")}for(var i=t.split(" "),a=function(t){if(i[t].match(S)){var e=function(e){if(i[t].includes(A[e]))if(n[u=t]||(n[u]=[]),E(n,t))n[E(n,t)].forEach((function(r){var o=w()(r);o[t]=r[t].replace(A[e],e),n[u].push(o)}));else{var r=w()(i);r[t]=i[t].replace(A[e],e),n[u].push(r)}};for(var r in A)e(r)}},c=0;c<i.length;c++){var u;a(c)}return console.log("vars",n),E(n,999)?n[E(n,999)].map((function(t){return t.join(" ")})):[t]},_=function(t,n,e){n=[].concat(w()(n),w()(n.map((function(t){return e.replace(/_+/g,t)}))));var r=k(t);return O(r,n)},O=function(t,n){for(var e=0;e<t.length;e++)for(var r=0;r<n.length;r++)if(o=t[e],i=n[r],T(o)===T(i))return!0;var o,i;return!1};var B=function(){return function(t){for(var n="",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",r=e.length,o=0;o<t;o++)n+=e.charAt(Math.floor(Math.random()*r));return n}(10)};function j(t){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var e,r=h()(t);if(n){var o=h()(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return p()(this,e)}}var I=function(){function t(n,e){var r=this;o()(this,t),a()(this,"hide",(function(){r.mainElement.style.display="none"})),a()(this,"check",(function(){var t=r.getAnswer(),n=r.certainCheck(t);r.checkInitialized||(r.checkInitialized=!0,r.firstTimeCorrect=n),r.resultCorrect=n,r.renderResult(n),console.log("resu",n)})),a()(this,"renderResult",(function(t){console.log("isCOrrent",t),t?(r.mainElement.classList.remove("incorrect"),r.mainElement.classList.add("correct")):(r.mainElement.classList.remove("correct"),r.mainElement.classList.add("incorrect"))})),a()(this,"baseAddListeners",(function(){r.mainElement.querySelector(".check-sign").addEventListener("click",r.check)})),this.questionData=n,this.parentElem=e,this.id=B(),this.resultCorrect=!1,this.checkInitialized=!1,this.firstTimeCorrect=!1,this.input=null}return g()(t,[{key:"renderQuestion",value:function(){var t=this.questionTemplate(this.questionData,this.id);this.parentElem.insertAdjacentHTML("beforeend",t),console.log("html",t),console.log("this.parentElem.lastChild",this.parentElem.querySelector("#".concat(this.id)));var n=this.parentElem.querySelector("#".concat(this.id));this.mainElement=n,this.input=this.mainElement.querySelector("input"),this.baseAddListeners()}}]),t}(),C=function(t){l()(e,t);var n=j(e);function e(){var t;o()(this,e);for(var r=arguments.length,i=new Array(r),c=0;c<r;c++)i[c]=arguments[c];return t=n.call.apply(n,[this].concat(i)),a()(u()(t),"questionTemplate",(function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];return console.log("args",n),x.apply(void 0,n)})),a()(u()(t),"certainCheck",(function(n){var e=t.questionData.rightAnswers;return q(n,e)})),a()(u()(t),"check",(function(t){return q(t,rightAnswers)})),a()(u()(t),"changeHandler",(function(n){console.log("change",n.target.value);var e=n.target.value;t.userValue=e,t.check(e)})),t}return g()(e,[{key:"getAnswer",value:function(){return this.input.value}}]),e}(I),R=function(t){l()(e,t);var n=j(e);function e(){var t;o()(this,e);for(var r=arguments.length,i=new Array(r),c=0;c<r;c++)i[c]=arguments[c];return t=n.call.apply(n,[this].concat(i)),a()(u()(t),"questionTemplate",(function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];return console.log("args",n),x.apply(void 0,n)})),a()(u()(t),"certainCheck",(function(n){var e=t.questionData,r=e.rightAnswers,o=e.questionText;return _(n,r,o)})),a()(u()(t),"changeHandler",(function(n){console.log("change",n.target.value);var e=n.target.value;t.userValue=e,t.check(e)})),t}return g()(e,[{key:"getAnswer",value:function(){return this.input.value}}]),e}(I),L=function(t,n){switch(t.questionType){case"simple-text":return new C(t,n);case"text-in-blank":return new R(t,n)}},P=function t(){var n=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],i=arguments.length>1?arguments[1]:void 0;o()(this,t),a()(this,"questions",[]),a()(this,"convertedQuestions",[]),a()(this,"initSection",(function(t){n.questions=n.sections[t].questions,n.currentSection=t,n.convertedQuestions=n.questions.map((function(t){return L(t,n.questionsContainer)})),n.renderQuiz()})),a()(this,"changeSection",(function(t){console.log("this.next seciton"),n.maxSectionNumber===t&&(n.isLastSection=!0,n.parentElement.querySelector(".button-container").removeChild(n.nextButton)),n.convertedQuestions.forEach((function(t){t.hide()}));var e=n.parentElement.querySelector(".section-header");e&&n.questionsContainer.removeChild(e),n.initSection(t)})),a()(this,"appendStyles",(function(){var t=e(116),n=document.getElementsByTagName("head")[0],r=document.createElement("style");r.innerHTML=t,n.appendChild(r)})),a()(this,"findAllFalse",(function(){return n.convertedQuestions.filter((function(t){return!t.checkResult}))})),a()(this,"checkCorrect",(function(){for(var t=0;t<n.convertedQuestions.length;t++)n.convertedQuestions[t].check()})),a()(this,"questionCallback",(function(t){t&&n.findAllFalse()})),a()(this,"renderMainControls",(function(){console.log("dsa",n.parentElement);n.parentElement.insertAdjacentHTML("beforeend",'\n    <div class = "questions-list"> </div>\n    <div class="button-container">\n      <button class="button" id="check_button">Check Answers</button>\n      <button class="button" id="next-section">Next Section</button> \n\n    </div>\n    '),n.checkButton=document.querySelector("#check_button"),n.nextButton=document.querySelector("#next-section"),n.checkButton.addEventListener("click",n.checkCorrect),n.nextButton.addEventListener("click",(function(){n.changeSection(n.currentSection+1)})),n.questionsContainer=n.parentElement.querySelector(".questions-list")})),a()(this,"renderQuiz",(function(){var t='<div class="question section-header">'.concat(n.sections[n.currentSection].header,"</div>");n.questionsContainer.insertAdjacentHTML("beforeend",t);for(var e=0;e<n.convertedQuestions.length;e++)n.convertedQuestions[e].renderQuestion()})),this.sections=r,this.maxSectionNumber=r.length-1,this.parentElement=i,this.appendStyles(),this.renderMainControls(),this.changeSection(0)},D=[{header:" B4B Mission 1.20.1 Поставьте в пропуски предлоги AT, ON или IN. Не пишите предложения целиком.",questions:[{questionType:"text-in-blank",questionText:"Let’s meet ___ 5 o’clock.",rightAnswers:["at"],variants:null},{questionType:"text-in-blank",questionText:"She never goes out ___ Fridays.",rightAnswers:["on"],variants:null},{questionType:"text-in-blank",questionText:"They sometimes go skiing ___ the winter.",rightAnswers:["in"],variants:null},{questionType:"text-in-blank",questionText:"We can meet ___ the weekend if you like.",rightAnswers:["at"],variants:null},{questionType:"text-in-blank",questionText:"See you ___ September!",rightAnswers:["in"],variants:null},{questionType:"text-in-blank",questionText:"My day starts ___ half past six.",rightAnswers:["at"],variants:null},{questionType:"text-in-blank",questionText:"I’m always busy ___ the week.",rightAnswers:["in"],variants:null},{questionType:"text-in-blank",questionText:"We are going on holiday ___ 6 November.",rightAnswers:["on"],variants:null},{questionType:"text-in-blank",questionText:"The film finishes ___ 10.50.",rightAnswers:["at"],variants:null},{questionType:"text-in-blank",questionText:"He can’t sleep ___ night.",rightAnswers:["at"],variants:null},{questionType:"text-in-blank",questionText:"We usually go to bed ___ the same time.",rightAnswers:["at"],variants:null}]},{header:" B4B Mission 1.20.2 Перефразируйте предложения с помощью слов past, to, quarter и half.",questions:[{questionType:"simple-text",questionText:"I go to the shops at 2.15.",rightAnswers:["I go to the shops at quarter past two.","I go to the shops at a quarter past two."],variants:null},{questionType:"simple-text",questionText:"I start work at 9.30.",rightAnswers:["I start work at half past nine."],variants:null},{questionType:"simple-text",questionText:"I have a coffee break at 11.45.",rightAnswers:["I have a coffee break at quarter to twelve.","I have a coffee break at a quarter to twelve."],variants:null},{questionType:"simple-text",questionText:"I read emails at 3.15.",rightAnswers:["I read emails at quarter past three.","I read emails at a quarter past three."],variants:null},{questionType:"simple-text",questionText:"I send emails at 3.45.",rightAnswers:["I send emails at quarter to four.","I send emails at a quarter to four."],variants:null},{questionType:"simple-text",questionText:"I get up at 7.30.",rightAnswers:["I get up at half past seven."],variants:null},{questionType:"simple-text",questionText:"I go to bed at 1.15.",rightAnswers:["I go to bed at quarter past one.","I go to bed at a quarter past one."],variants:null},{questionType:"simple-text",questionText:"I have breakfast at 8.30.",rightAnswers:["I have breakfast at half past eight."],variants:null},{questionType:"simple-text",questionText:"I have lunch at 12.45.",rightAnswers:["I have lunch at quarter to one.","I have lunch at a quarter to one."],variants:null},{questionType:"simple-text",questionText:"I make phone calls at 2.15.",rightAnswers:["I make phone calls at quarter past two.","I make phone calls at a quarter past two."],variants:null},{questionType:"simple-text",questionText:"I finish work at 5.30.",rightAnswers:["I finish work at half past five."],variants:null},{questionType:"",variants:null}]}];document.addEventListener("DOMContentLoaded",(function(){new P(D,document.querySelector("#quiz"))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,